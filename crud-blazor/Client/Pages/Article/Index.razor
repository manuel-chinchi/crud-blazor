@page "/articles"

@using System.IO
@using CsvHelper
@using CsvHelper.Configuration
@using CsvHelper.TypeConversion
@using OfficeOpenXml
@using iText.Kernel.Pdf
@using iText.Layout
@using iText.Layout.Element

@inject HttpClient Http
@inject SweetAlertService Swal
@inject IJSRuntime JS

<h3>Articles</h3>
<a class="btn btn-primary" href="article-create"><span class="oi oi-plus mr-2"></span>Create</a>
<br />
<br />

@if (articles == null)
{
    <p>Loading items...</p>
}
else if (articles.Length == 0)
{
    <p>No items</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Name</th>
                <th>Category</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var article in articles)
            {
                <tr>
                    <td>@article.Id</td>
                    <td>@article.Name</td>
                    <td>@article.Category.Name</td>
                    <td>
                        <a class="btn btn-success" href="article-edit/@article.Id"><span class="oi oi-pencil mr-2"></span>Edit</a>
                        <button class="btn btn-danger" @onclick="@(()=>DeleteArticle(@article.Id))"><span class="oi oi-delete mr-2"></span>Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<div class="dropdown">
    <button class="btn btn-secondary dropdown-toggle" type="button" id="dropdownMenu2" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
        <span class="oi oi-data-transfer-download mr-2"></span>
        Export
    </button>
    <div class="dropdown-menu" aria-labelledby="dropdownMenu2">
        <button class="dropdown-item" type="button" @onclick="ExportToCSV">CSV</button>
        <button class="dropdown-item" type="button" @onclick="ExportToExcel">Excel</button>
        <button class="dropdown-item" type="button" @onclick="ExportToPDF">PDF</button>
    </div>
</div>

@code {
    Article[] articles;

    protected override async Task OnInitializedAsync()
    {
        await LoadArticles();
    }

    async Task LoadArticles()
    {
        articles = await Http.GetFromJsonAsync<Article[]>("Article");
    }

    async Task DeleteArticle(int id)
    {
        Article a = await Http.GetFromJsonAsync<Article>($"Article/{id}");
        var result = await Swal.FireAsync(new SweetAlertOptions()
        {
            Title = "Confirm",
            Text = $"Are you sure you want to delete the article \"{a.Name}\"?",
            Icon = SweetAlertIcon.Warning,
            ConfirmButtonText = "Yes",
            CancelButtonText = "No",
            ShowCancelButton = true
        });

        if (!string.IsNullOrEmpty(result.Value))
        {
            await Http.DeleteAsync($"Article/{id}");
            await LoadArticles();
        }
    }

    class ArticleMap : ClassMap<Article>
    {
        public ArticleMap()
        {
            Map(m => m.Id).Name("Id");
            Map(m => m.Name).Name("Name");
            Map(m => m.CreatedDate).Name("Creation date");
            References<CategoryMap>(m => m.Category);
        }
    }

    class CategoryMap : ClassMap<Category>
    {
        public CategoryMap()
        {
            Map(m => m.Name).Name("Category name");
        }
    }

    void ExportToCSV()
    {
        using (var ms = new MemoryStream())
        {
            using (var sw = new StreamWriter(ms))
            {
                sw.WriteLine("sep=,"); // FIX only for MS Excel

                using (var csv = new CsvWriter(sw, System.Globalization.CultureInfo.InvariantCulture))
                {
                    // custom content mapping
                    csv.Context.RegisterClassMap<ArticleMap>();
                    csv.Context.RegisterClassMap<CategoryMap>();

                    // custom format for dates
                    var opt = new TypeConverterOptions { Formats = new[] { "dd/MM/yyyy" } };
                    csv.Context.TypeConverterOptionsCache.AddOptions<DateTime>(opt);

                    csv.WriteRecords(articles);
                }

                var array = ms.ToArray();
                JS.InvokeAsync<object>("saveAsFile", "Articles.csv", array);
            }
        }
    }

    void ExportToExcel()
    {
        using (var package = new ExcelPackage())
        {
            var ws = package.Workbook.Worksheets.Add("Articles");

            ws.Cells["A1"].Value = "Id";
            ws.Cells["B1"].Value = "Name";
            ws.Cells["C1"].Value = "Creation date";
            ws.Cells["D1"].Value = "Category";

            ws.Column(3).Width = 15;
            ws.Column(4).Width = 20;

            for (int i = 0; i < articles.Length; i++)
            {
                var item = articles[i];
                ws.Cells[i + 2, 1].Value = item.Id;
                ws.Cells[i + 2, 2].Value = item.Name;
                ws.Cells[i + 2, 3].Value = item.CreatedDate.ToString("dd/MM/yyyy");
                ws.Cells[i + 2, 4].Value = item.Category.Name;
            }

            ws.Cells["C:C"].Style.Numberformat.Format = "dd/mm/yyyy";

            JS.InvokeAsync<object>("saveAsFile", "articles.xlsx", package.GetAsByteArray());
        }
    }

    byte[] GetContentToByteArray()
    {
        List<Article> articles = this.articles.ToList();
        using (MemoryStream stream = new MemoryStream())
        {
            PdfWriter writer = new PdfWriter(stream);
            PdfDocument pdf = new PdfDocument(writer);
            Document document = new Document(pdf);

            // Add title
            document.Add(new Paragraph("List of Categories"));

            // Add table
            Table table = new Table(4);
            table.AddHeaderCell("Id");
            table.AddHeaderCell("Name");
            table.AddHeaderCell("Creation Date");
            table.AddHeaderCell("Category Name");

            foreach (var article in articles)
            {
                table.AddCell(article.Id.ToString());
                table.AddCell(article.Name);
                table.AddCell(article.CreatedDate.ToString("dd/MM/yyyy"));
                table.AddCell(article.Category.Name);
            }

            document.Add(table);
            document.Close();

            return stream.ToArray();
        }
    }

    void ExportToPDF()
    {
        JS.InvokeAsync<object>("saveAsFile", "Articles.pdf", GetContentToByteArray());
    }
}
