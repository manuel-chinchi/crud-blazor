@page "/categories"

@using System.IO
@using CsvHelper
@using CsvHelper.TypeConversion
@using OfficeOpenXml
@using OfficeOpenXml.Style
@using iText.Kernel.Pdf
@using iText.Layout
@using iText.Layout.Element

@inject HttpClient Http
@inject SweetAlertService Swal
@inject IJSRuntime JS

<h3>Categories</h3>
<a class="btn btn-primary" href="category-create"><span class="oi oi-plus mr-2"></span>Create</a>
<br />
<br />

@if (categories == null)
{
    <p>Loading items...</p>
}
else if (categories.Length == 0)
{
    <p>No items</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Name</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var category in categories)
            {
                <tr>
                    <td>@category.Id</td>
                    <td>@category.Name</td>
                    <td>
                        <button class="btn btn-danger" @onclick="@(()=>DeleteCategory(category.Id))"><span class="oi oi-delete mr-2"></span>Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<div class="dropdown">
    <button class="btn btn-secondary dropdown-toggle" type="button" id="dropdownMenu2" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
        <span class="oi oi-data-transfer-download mr-2"></span>
        Export
    </button>
    <div class="dropdown-menu" aria-labelledby="dropdownMenu2">
        <button class="dropdown-item" type="button" @onclick="ExportToCSV">CSV</button>
        <button class="dropdown-item" type="button" @onclick="ExportToExcel">Excel</button>
        <button class="dropdown-item" type="button" @onclick="ExportToPDF">PDF</button>
    </div>
</div>

@code {
    public Category[] categories;

    protected override async Task OnInitializedAsync()
    {
        await LoadCategories();
    }

    async Task LoadCategories()
    {
        categories = await Http.GetFromJsonAsync<Category[]>("Category");
    }

    async Task DeleteCategory(int id)
    {
        var c = await Http.GetFromJsonAsync<Category>($"Category/{id}");
        var result = await Swal.FireAsync(new SweetAlertOptions()
        {
            Title = "Confirm",
            Text = $"Are you sure you want to delete the category \"{c.Name}\"?",
            Icon = SweetAlertIcon.Warning,
            ConfirmButtonText = "Yes",
            CancelButtonText = "No",
            ShowCancelButton = true
        });

        if (!string.IsNullOrEmpty(result.Value))
        {
            await Http.DeleteAsync($"Category/{id}");
            await LoadCategories();
        }
    }

    void ExportToCSV()
    {
        using (var ms = new MemoryStream())
        {
            using (var sw = new StreamWriter(ms))
            {
                sw.WriteLine("sep=,"); // FIX only for MS Excel
                using (var csv = new CsvWriter(sw, System.Globalization.CultureInfo.InvariantCulture))
                {
                    var opt = new TypeConverterOptions { Formats = new[] { "dd/MM/yyyy" } };
                    csv.Context.TypeConverterOptionsCache.AddOptions<DateTime>(opt);

                    csv.WriteRecords(categories);
                }

                var array = ms.ToArray();
                JS.InvokeAsync<object>("saveAsFile", "Categories.csv", array);
            }
        }
    }

    void ExportToExcel()
    {
        using (var package = new ExcelPackage())
        {
            var ws = package.Workbook.Worksheets.Add("Categories");

            ws.Cells["A1"].Value = "Id";
            ws.Cells["B1"].Value = "Name";
            ws.Cells["C1"].Value = "Creation date";

            ws.Column(3).Width = 15;

            var body = ws.Cells["A2:A2"].LoadFromCollection(categories);
            body.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

            ws.Cells["C:C"].Style.Numberformat.Format = "dd/mm/yyyy";

            JS.InvokeAsync<object>("saveAsFile", "Categories.xlsx", package.GetAsByteArray());
        }
    }

    byte[] GetContentToByteArray()
    {
        List<Category> categories = this.categories.ToList();

        using (MemoryStream stream = new MemoryStream())
        {
            PdfWriter writer = new PdfWriter(stream);
            PdfDocument pdf = new PdfDocument(writer);
            Document document = new Document(pdf);

            // Add title
            document.Add(new Paragraph("List of Categories"));

            // Add table
            Table table = new Table(3);
            table.AddHeaderCell("Id");
            table.AddHeaderCell("Name");
            table.AddHeaderCell("Creation Date");

            foreach (var category in categories)
            {
                table.AddCell(category.Id.ToString());
                table.AddCell(category.Name);
                table.AddCell(category.CreatedDate.ToString("dd/MM/yyyy"));
            }

            document.Add(table);
            document.Close();

            return stream.ToArray();
        }
    }

    void ExportToPDF()
    {
        JS.InvokeAsync<object>("saveAsFile", "Categories.pdf", GetContentToByteArray());
    }
}
