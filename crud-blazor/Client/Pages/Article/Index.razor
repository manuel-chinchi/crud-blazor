@page "/articles"

@inject HttpClient Http
@inject SweetAlertService Swal
@inject IJSRuntime JS

<h3>Articles</h3>
<a class="btn btn-primary" href="article-create"><span class="oi oi-plus mr-2"></span>Create</a>
<br />
<br />

@if (articles == null)
{
    <p>Loading items...</p>
}
else if (articles.Length == 0)
{
    <p>No items</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Name</th>
                <th>Category</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var article in articles)
            {
                <tr>
                    <td>@article.Id</td>
                    <td>@article.Name</td>
                    <td>@article.Category.Name</td>
                    <td>
                        <a class="btn btn-success" href="article-edit/@article.Id"><span class="oi oi-pencil mr-2"></span>Edit</a>
                        <button class="btn btn-danger" @onclick="@(()=>DeleteArticle(@article.Id))"><span class="oi oi-delete mr-2"></span>Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<div class="dropdown">
    <button class="btn btn-secondary dropdown-toggle" type="button" id="dropdownMenu2" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
        <span class="oi oi-data-transfer-download mr-2"></span>
        Export
    </button>
    <div class="dropdown-menu" aria-labelledby="dropdownMenu2">
        <button class="dropdown-item" type="button" @onclick="ExportToCSV">CSV</button>
        <button class="dropdown-item" type="button" @onclick="ExportToExcel">Excel</button>
        <button class="dropdown-item" type="button" @onclick="ExportToPDF">PDF</button>
    </div>
</div>

@code {
    Article[] articles;

    protected override async Task OnInitializedAsync()
    {
        await LoadArticles();
    }

    async Task LoadArticles()
    {
        articles = await Http.GetFromJsonAsync<Article[]>("Article");
    }

    async Task DeleteArticle(int id)
    {
        Article a = await Http.GetFromJsonAsync<Article>($"Article/{id}");
        var result = await Swal.FireAsync(new SweetAlertOptions()
        {
            Title = "Confirm",
            Text = $"Are you sure you want to delete the article \"{a.Name}\"?",
            Icon = SweetAlertIcon.Warning,
            ConfirmButtonText = "Yes",
            CancelButtonText = "No",
            ShowCancelButton = true
        });

        if (!string.IsNullOrEmpty(result.Value))
        {
            await Http.DeleteAsync($"Article/{id}");
            await LoadArticles();
        }
    }

    async void ExportToCSV()
    {
        var response = await Http.PostAsJsonAsync<Article[]>("export/articles/csv", articles);
        if (response.IsSuccessStatusCode)
        {
            var bytes = await response.Content.ReadAsByteArrayAsync();
            await JS.InvokeAsync<object>("saveAsFile", "Articles.csv", bytes);
        }
    }

    async void ExportToExcel()
    {
        var result = await Http.PostAsJsonAsync<Article[]>("export/articles/excel", articles);
        if (result.IsSuccessStatusCode)
        {
            var bytes = await result.Content.ReadAsByteArrayAsync();
            await JS.InvokeAsync<object>("saveAsFile", "Articles.xlsx", bytes);
        }
    }

    async void ExportToPDF()
    {
        var result = await Http.PostAsJsonAsync<Article[]>("export/articles/pdf", articles);
        if (result.IsSuccessStatusCode)
        {
            var bytes = await result.Content.ReadAsByteArrayAsync();
            await JS.InvokeAsync<object>("saveAsFile", "Articles.pdf", bytes);
        }
    }
}
